name: Java CI avec Maven - Tester et empaqueter

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Récupérer le code
        uses: actions/checkout@v4

      # Étape pour mettre en cache les dépendances Maven
      - name: Mettre en cache les dépendances Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository  # Dossier de cache Maven local
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}  # Clé de cache basée sur le hash de pom.xml
          restore-keys: |
            ${{ runner.os }}-maven-  # Clé de secours en cas de cache partiel

      # Étape pour mettre en cache les paquets SonarQube
      - name: Mettre en cache les paquets SonarQube
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Étape pour mettre en cache les paquets Gradle
      - name: Mettre en cache les paquets Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Configurer JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'

      - name: Construire et analyser avec SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=$(echo ${{ github.repository }} | sed 's-/-_-') \
            -Dsonar.login=$SONAR_TOKEN

